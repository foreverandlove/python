初始化两个变量，maxe 和 mine，分别用于存储当前遍历到的最大值和最小值。可以将 maxe 初始化为数组的第一个元素 a[0]，mine 也初始化为 a[0]。
从数组的第二个元素（即 a[1]）开始遍历到数组的最后一个元素 a[n-1]。
对于每个遍历到的元素 a[i]：
如果 a[i] 大于 maxe，则更新 maxe 为 a[i]。
如果 a[i] 小于 mine，则更新 mine 为 a[i]。
遍历完成后，maxe 和 mine 分别存储了数组中的最大值和最小值。
时间复杂度分析
最好情况：数组已经是完全有序的（无论是升序还是降序），算法仍然需要遍历整个数组来确认最大值和最小值，因此时间复杂度为 
O(n)
O(n)。
最坏情况：数组完全无序，算法同样需要遍历整个数组来找到最大值和最小值，时间复杂度也是 
O(n)
O(n)。
平均情况：由于算法的执行不依赖于数组元素的特定顺序（除了第一个元素用于初始化），平均时间复杂度同样是 
O(n)
O(n)。
function findMinMax(a, n):
    if n == 0:
        return None, None  # 如果数组为空，则返回None

    maxe = a[0]
    mine = a[0]

    for i from 1 to n-1:
        if a[i] > maxe:
            maxe = a[i]
        if a[i] < mine:
            mine = a[i]

    return maxe, mine__CLOSED__
